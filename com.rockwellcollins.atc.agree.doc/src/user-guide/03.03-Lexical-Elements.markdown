[//]: # (Copyright 2021, Collins Aerospace.
Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).

Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
including any software or models in source or binary form, as well as any drawings, specifications, 
and documentation (collectively "the Data"), to deal in the Data without restriction, including
without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or 
substantial portions of the Data.

THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
)

## Lexical Elements{#sec:lexical_elements}

Comments always start with two adjacent hyphens and span to the end of a
line. Here is an example:

~~~~~
-- Here is a comment.

-- a long comment may be split onto
-- two or more consecutive lines
~~~~~

An identifier is defined as a letter followed by zero or more letters,
digits, or single underscores:

~~~~~
ID ::= identifier_letter ( ('_')? letter_or_digit)*

letter_or_digit ::= identifier_letter | digit

identifier_letter ::= ('A'..'Z' | 'a'..'z')

digit ::= (0..9)
~~~~~

Some example identifiers include `Count`, `X`, `Get_Symbol`, `Ethelyn`,
`Snobol_4`, `X1`, `Page_Count`, and `Store_Next_Item`.
**Note: Identifiers are case insensitive**! Thus `Hello`, `HeLlO`, and `HELLO`
all refer to the same entity in AADL.

Boolean and numeric literal values are defined as follows:

~~~~~
Literal :: = Boolean_literal | Integer_literal | Real_literal

Integer_literal ::= decimal_integer_literal

Real_literal ::= decimal_real_literal

decimal_integer_literal ::= ('–')? numeral

decimal_real_literal ::= ('–')? numeral '.' numeral

numeral ::= digit*
~~~~~

Boolean\_literal are `true` and `false`.

Examples of Integer\_literals include `1`, `42`, and `-1337`.

Examples of Real\_literals include `3.1415`, `1.6180`, and `0.001`.

String elements are defined with the following syntax:

~~~~~
STRING ::= "(string_element)*"

string_element ::= "" | non_quotation_mark_graphic_character
~~~~~

