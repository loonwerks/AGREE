/*
 * generated by Xtext 2.11.0
 */
package edu.uah.rsesc.aadlsimulator.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import edu.uah.rsesc.aadlsimulator.xtext.ide.contentassist.antlr.internal.InternalInputConstraintParser;
import edu.uah.rsesc.aadlsimulator.xtext.services.InputConstraintGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class InputConstraintParser extends AbstractContentAssistParser {

	@Inject
	private InputConstraintGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalInputConstraintParser createParser() {
		InternalInputConstraintParser result = new InternalInputConstraintParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExprAccess().getAlternatives(), "rule__Expr__Alternatives");
					put(grammarAccess.getFunctionAccess().getAlternatives(), "rule__Function__Alternatives");
					put(grammarAccess.getRandomAccess().getAlternatives(), "rule__Random__Alternatives");
					put(grammarAccess.getRefAccess().getAlternatives(), "rule__Ref__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getIntervalAccess().getAlternatives_1(), "rule__Interval__Alternatives_1");
					put(grammarAccess.getIntervalAccess().getAlternatives_5(), "rule__Interval__Alternatives_5");
					put(grammarAccess.getBooleanLiteralAccess().getAlternatives(), "rule__BooleanLiteral__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getAddSubOperatorAccess().getAlternatives(), "rule__AddSubOperator__Alternatives");
					put(grammarAccess.getMultDivOperatorAccess().getAlternatives(), "rule__MultDivOperator__Alternatives");
					put(grammarAccess.getAddSubAccess().getGroup(), "rule__AddSub__Group__0");
					put(grammarAccess.getAddSubAccess().getGroup_1(), "rule__AddSub__Group_1__0");
					put(grammarAccess.getMultDivAccess().getGroup(), "rule__MultDiv__Group__0");
					put(grammarAccess.getMultDivAccess().getGroup_1(), "rule__MultDiv__Group_1__0");
					put(grammarAccess.getPreAccess().getGroup(), "rule__Pre__Group__0");
					put(grammarAccess.getRandomIntegerAccess().getGroup(), "rule__RandomInteger__Group__0");
					put(grammarAccess.getRandomRealAccess().getGroup(), "rule__RandomReal__Group__0");
					put(grammarAccess.getRandomElementAccess().getGroup(), "rule__RandomElement__Group__0");
					put(grammarAccess.getElementRefAccess().getGroup(), "rule__ElementRef__Group__0");
					put(grammarAccess.getElementRefAccess().getGroup_2(), "rule__ElementRef__Group_2__0");
					put(grammarAccess.getConstRefAccess().getGroup(), "rule__ConstRef__Group__0");
					put(grammarAccess.getConstRefAccess().getGroup_1(), "rule__ConstRef__Group_1__0");
					put(grammarAccess.getNegativeAccess().getGroup(), "rule__Negative__Group__0");
					put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
					put(grammarAccess.getIntervalAccess().getGroup(), "rule__Interval__Group__0");
					put(grammarAccess.getSetAccess().getGroup(), "rule__Set__Group__0");
					put(grammarAccess.getSetAccess().getGroup_2(), "rule__Set__Group_2__0");
					put(grammarAccess.getSetAccess().getGroup_2_1(), "rule__Set__Group_2_1__0");
					put(grammarAccess.getAddSubAccess().getOpAssignment_1_1(), "rule__AddSub__OpAssignment_1_1");
					put(grammarAccess.getAddSubAccess().getRightAssignment_1_2(), "rule__AddSub__RightAssignment_1_2");
					put(grammarAccess.getMultDivAccess().getOpAssignment_1_1(), "rule__MultDiv__OpAssignment_1_1");
					put(grammarAccess.getMultDivAccess().getRightAssignment_1_2(), "rule__MultDiv__RightAssignment_1_2");
					put(grammarAccess.getPreAccess().getRefAssignment_3(), "rule__Pre__RefAssignment_3");
					put(grammarAccess.getRandomIntegerAccess().getIntervalAssignment_1(), "rule__RandomInteger__IntervalAssignment_1");
					put(grammarAccess.getRandomRealAccess().getIntervalAssignment_1(), "rule__RandomReal__IntervalAssignment_1");
					put(grammarAccess.getRandomElementAccess().getSetAssignment_1(), "rule__RandomElement__SetAssignment_1");
					put(grammarAccess.getElementRefAccess().getIdsAssignment_1(), "rule__ElementRef__IdsAssignment_1");
					put(grammarAccess.getElementRefAccess().getIdsAssignment_2_1(), "rule__ElementRef__IdsAssignment_2_1");
					put(grammarAccess.getConstRefAccess().getPackageSegmentsAssignment_1_0(), "rule__ConstRef__PackageSegmentsAssignment_1_0");
					put(grammarAccess.getConstRefAccess().getConstantNameAssignment_2(), "rule__ConstRef__ConstantNameAssignment_2");
					put(grammarAccess.getNegativeAccess().getValueAssignment_2(), "rule__Negative__ValueAssignment_2");
					put(grammarAccess.getIntervalAccess().getLeftClosedAssignment_1_0(), "rule__Interval__LeftClosedAssignment_1_0");
					put(grammarAccess.getIntervalAccess().getLeftAssignment_2(), "rule__Interval__LeftAssignment_2");
					put(grammarAccess.getIntervalAccess().getRightAssignment_4(), "rule__Interval__RightAssignment_4");
					put(grammarAccess.getIntervalAccess().getRightClosedAssignment_5_0(), "rule__Interval__RightClosedAssignment_5_0");
					put(grammarAccess.getSetAccess().getMembersAssignment_2_0(), "rule__Set__MembersAssignment_2_0");
					put(grammarAccess.getSetAccess().getMembersAssignment_2_1_1(), "rule__Set__MembersAssignment_2_1_1");
					put(grammarAccess.getIntegerLiteralAccess().getValueAssignment(), "rule__IntegerLiteral__ValueAssignment");
					put(grammarAccess.getRealLiteralAccess().getValueAssignment(), "rule__RealLiteral__ValueAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment_0(), "rule__BooleanLiteral__ValueAssignment_0");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1(), "rule__BooleanLiteral__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public InputConstraintGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(InputConstraintGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
