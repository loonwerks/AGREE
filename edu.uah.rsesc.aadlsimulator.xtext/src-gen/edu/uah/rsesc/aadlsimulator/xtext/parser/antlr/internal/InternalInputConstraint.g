/*
 * generated by Xtext 2.11.0
 */
grammar InternalInputConstraint;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package edu.uah.rsesc.aadlsimulator.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.uah.rsesc.aadlsimulator.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.uah.rsesc.aadlsimulator.xtext.services.InputConstraintGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private InputConstraintGrammarAccess grammarAccess;

    public InternalInputConstraintParser(TokenStream input, InputConstraintGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "InputConstraint";
   	}

   	@Override
   	protected InputConstraintGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleInputConstraint
entryRuleInputConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputConstraintRule()); }
	iv_ruleInputConstraint=ruleInputConstraint
	{ $current=$iv_ruleInputConstraint.current; }
	EOF;

// Rule InputConstraint
ruleInputConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getInputConstraintAccess().getExprParserRuleCall());
	}
	this_Expr_0=ruleExpr
	{
		$current = $this_Expr_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExprAccess().getScalarParserRuleCall_0());
		}
		this_Scalar_0=ruleScalar
		{
			$current = $this_Scalar_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExprAccess().getIntervalParserRuleCall_1());
		}
		this_Interval_1=ruleInterval
		{
			$current = $this_Interval_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExprAccess().getSetParserRuleCall_2());
		}
		this_Set_2=ruleSet
		{
			$current = $this_Set_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleScalar
entryRuleScalar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScalarRule()); }
	iv_ruleScalar=ruleScalar
	{ $current=$iv_ruleScalar.current; }
	EOF;

// Rule Scalar
ruleScalar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getScalarAccess().getAddSubParserRuleCall());
	}
	this_AddSub_0=ruleAddSub
	{
		$current = $this_AddSub_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAddSub
entryRuleAddSub returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddSubRule()); }
	iv_ruleAddSub=ruleAddSub
	{ $current=$iv_ruleAddSub.current; }
	EOF;

// Rule AddSub
ruleAddSub returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAddSubAccess().getMultDivParserRuleCall_0());
		}
		this_MultDiv_0=ruleMultDiv
		{
			$current = $this_MultDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAddSubAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddSubAccess().getOpAddSubOperatorEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleAddSubOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddSubRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.AddSubOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddSubAccess().getRightMultDivParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddSubRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.MultDiv");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultDiv
entryRuleMultDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultDivRule()); }
	iv_ruleMultDiv=ruleMultDiv
	{ $current=$iv_ruleMultDiv.current; }
	EOF;

// Rule MultDiv
ruleMultDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMultDivAccess().getFunctionParserRuleCall_0());
		}
		this_Function_0=ruleFunction
		{
			$current = $this_Function_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultDivAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultDivAccess().getOpMultDivOperatorEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleMultDivOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultDivRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.MultDivOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultDivAccess().getRightFunctionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultDivRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.Function");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getPreParserRuleCall_0());
		}
		this_Pre_0=rulePre
		{
			$current = $this_Pre_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getRandomParserRuleCall_1());
		}
		this_Random_1=ruleRandom
		{
			$current = $this_Random_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getRefParserRuleCall_2());
		}
		this_Ref_2=ruleRef
		{
			$current = $this_Ref_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getConstRefParserRuleCall_3());
		}
		this_ConstRef_3=ruleConstRef
		{
			$current = $this_ConstRef_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getNegativeParserRuleCall_4());
		}
		this_Negative_4=ruleNegative
		{
			$current = $this_Negative_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getPrimaryParserRuleCall_5());
		}
		this_Primary_5=rulePrimary
		{
			$current = $this_Primary_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePre
entryRulePre returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreRule()); }
	iv_rulePre=rulePre
	{ $current=$iv_rulePre.current; }
	EOF;

// Rule Pre
rulePre returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getPreAccess().getPreExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='pre'
		{
			newLeafNode(otherlv_1, grammarAccess.getPreAccess().getPreKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPreAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPreAccess().getRefElementRefParserRuleCall_3_0());
				}
				lv_ref_3_0=ruleElementRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreRule());
					}
					set(
						$current,
						"ref",
						lv_ref_3_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.ElementRef");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getPreAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleRandom
entryRuleRandom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRandomRule()); }
	iv_ruleRandom=ruleRandom
	{ $current=$iv_ruleRandom.current; }
	EOF;

// Rule Random
ruleRandom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRandomAccess().getRandomIntegerParserRuleCall_0());
		}
		this_RandomInteger_0=ruleRandomInteger
		{
			$current = $this_RandomInteger_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRandomAccess().getRandomRealParserRuleCall_1());
		}
		this_RandomReal_1=ruleRandomReal
		{
			$current = $this_RandomReal_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRandomAccess().getRandomElementParserRuleCall_2());
		}
		this_RandomElement_2=ruleRandomElement
		{
			$current = $this_RandomElement_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRandomInteger
entryRuleRandomInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRandomIntegerRule()); }
	iv_ruleRandomInteger=ruleRandomInteger
	{ $current=$iv_ruleRandomInteger.current; }
	EOF;

// Rule RandomInteger
ruleRandomInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRandomIntegerAccess().getRandomIntegerExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRandomIntegerAccess().getIntervalIntervalParserRuleCall_1_0());
				}
				lv_interval_1_0=ruleInterval
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRandomIntegerRule());
					}
					set(
						$current,
						"interval",
						lv_interval_1_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.Interval");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getRandomIntegerAccess().getFullStopKeyword_2());
		}
		otherlv_3='rand_int()'
		{
			newLeafNode(otherlv_3, grammarAccess.getRandomIntegerAccess().getRand_intKeyword_3());
		}
	)
;

// Entry rule entryRuleRandomReal
entryRuleRandomReal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRandomRealRule()); }
	iv_ruleRandomReal=ruleRandomReal
	{ $current=$iv_ruleRandomReal.current; }
	EOF;

// Rule RandomReal
ruleRandomReal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRandomRealAccess().getRandomRealExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRandomRealAccess().getIntervalIntervalParserRuleCall_1_0());
				}
				lv_interval_1_0=ruleInterval
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRandomRealRule());
					}
					set(
						$current,
						"interval",
						lv_interval_1_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.Interval");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getRandomRealAccess().getFullStopKeyword_2());
		}
		otherlv_3='rand_real()'
		{
			newLeafNode(otherlv_3, grammarAccess.getRandomRealAccess().getRand_realKeyword_3());
		}
	)
;

// Entry rule entryRuleRandomElement
entryRuleRandomElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRandomElementRule()); }
	iv_ruleRandomElement=ruleRandomElement
	{ $current=$iv_ruleRandomElement.current; }
	EOF;

// Rule RandomElement
ruleRandomElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRandomElementAccess().getRandomElementExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRandomElementAccess().getSetSetParserRuleCall_1_0());
				}
				lv_set_1_0=ruleSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRandomElementRule());
					}
					set(
						$current,
						"set",
						lv_set_1_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.Set");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getRandomElementAccess().getFullStopKeyword_2());
		}
		otherlv_3='rand()'
		{
			newLeafNode(otherlv_3, grammarAccess.getRandomElementAccess().getRandKeyword_3());
		}
	)
;

// Entry rule entryRuleRef
entryRuleRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefRule()); }
	iv_ruleRef=ruleRef
	{ $current=$iv_ruleRef.current; }
	EOF;

// Rule Ref
ruleRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRefAccess().getElementRefParserRuleCall_0());
		}
		this_ElementRef_0=ruleElementRef
		{
			$current = $this_ElementRef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRefAccess().getConstRefParserRuleCall_1());
		}
		this_ConstRef_1=ruleConstRef
		{
			$current = $this_ConstRef_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleElementRef
entryRuleElementRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRefRule()); }
	iv_ruleElementRef=ruleElementRef
	{ $current=$iv_ruleElementRef.current; }
	EOF;

// Rule ElementRef
ruleElementRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getElementRefAccess().getElementRefExpressionAction_0(),
					$current);
			}
		)
		(
			(
				lv_ids_1_0=RULE_ID
				{
					newLeafNode(lv_ids_1_0, grammarAccess.getElementRefAccess().getIdsIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementRefRule());
					}
					addWithLastConsumed(
						$current,
						"ids",
						lv_ids_1_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.ID");
				}
			)
		)
		(
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getElementRefAccess().getFullStopKeyword_2_0());
			}
			(
				(
					lv_ids_3_0=RULE_ID
					{
						newLeafNode(lv_ids_3_0, grammarAccess.getElementRefAccess().getIdsIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getElementRefRule());
						}
						addWithLastConsumed(
							$current,
							"ids",
							lv_ids_3_0,
							"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConstRef
entryRuleConstRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstRefRule()); }
	iv_ruleConstRef=ruleConstRef
	{ $current=$iv_ruleConstRef.current; }
	EOF;

// Rule ConstRef
ruleConstRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstRefAccess().getConstRefExpressionAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_packageSegments_1_0=RULE_ID
					{
						newLeafNode(lv_packageSegments_1_0, grammarAccess.getConstRefAccess().getPackageSegmentsIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstRefRule());
						}
						addWithLastConsumed(
							$current,
							"packageSegments",
							lv_packageSegments_1_0,
							"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.ID");
					}
				)
			)
			otherlv_2='::'
			{
				newLeafNode(otherlv_2, grammarAccess.getConstRefAccess().getColonColonKeyword_1_1());
			}
		)+
		(
			(
				lv_constantName_3_0=RULE_ID
				{
					newLeafNode(lv_constantName_3_0, grammarAccess.getConstRefAccess().getConstantNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstRefRule());
					}
					setWithLastConsumed(
						$current,
						"constantName",
						lv_constantName_3_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleNegative
entryRuleNegative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegativeRule()); }
	iv_ruleNegative=ruleNegative
	{ $current=$iv_ruleNegative.current; }
	EOF;

// Rule Negative
ruleNegative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getNegativeAccess().getNegativeExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getNegativeAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNegativeAccess().getValueScalarParserRuleCall_2_0());
				}
				lv_value_2_0=ruleScalar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegativeRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.Scalar");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getIntegerLiteralParserRuleCall_0());
		}
		this_IntegerLiteral_0=ruleIntegerLiteral
		{
			$current = $this_IntegerLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getRealLiteralParserRuleCall_1());
		}
		this_RealLiteral_1=ruleRealLiteral
		{
			$current = $this_RealLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getBooleanLiteralParserRuleCall_2());
		}
		this_BooleanLiteral_2=ruleBooleanLiteral
		{
			$current = $this_BooleanLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getScalarParserRuleCall_3_1());
			}
			this_Scalar_4=ruleScalar
			{
				$current = $this_Scalar_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntervalRule()); }
	iv_ruleInterval=ruleInterval
	{ $current=$iv_ruleInterval.current; }
	EOF;

// Rule Interval
ruleInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntervalAccess().getIntervalExpressionAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_leftClosed_1_0='['
					{
						newLeafNode(lv_leftClosed_1_0, grammarAccess.getIntervalAccess().getLeftClosedLeftSquareBracketKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIntervalRule());
						}
						setWithLastConsumed($current, "leftClosed", true, "[");
					}
				)
			)
			    |
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getIntervalAccess().getLeftParenthesisKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIntervalAccess().getLeftScalarParserRuleCall_2_0());
				}
				lv_left_3_0=ruleScalar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntervalRule());
					}
					set(
						$current,
						"left",
						lv_left_3_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.Scalar");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getIntervalAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntervalAccess().getRightScalarParserRuleCall_4_0());
				}
				lv_right_5_0=ruleScalar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntervalRule());
					}
					set(
						$current,
						"right",
						lv_right_5_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.Scalar");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					lv_rightClosed_6_0=']'
					{
						newLeafNode(lv_rightClosed_6_0, grammarAccess.getIntervalAccess().getRightClosedRightSquareBracketKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIntervalRule());
						}
						setWithLastConsumed($current, "rightClosed", true, "]");
					}
				)
			)
			    |
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getIntervalAccess().getRightParenthesisKeyword_5_1());
			}
		)
	)
;

// Entry rule entryRuleSet
entryRuleSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	iv_ruleSet=ruleSet
	{ $current=$iv_ruleSet.current; }
	EOF;

// Rule Set
ruleSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetAccess().getSetExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSetAccess().getMembersScalarParserRuleCall_2_0_0());
					}
					lv_members_2_0=ruleScalar
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetRule());
						}
						add(
							$current,
							"members",
							lv_members_2_0,
							"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.Scalar");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSetAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSetAccess().getMembersScalarParserRuleCall_2_1_1_0());
						}
						lv_members_4_0=ruleScalar
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSetRule());
							}
							add(
								$current,
								"members",
								lv_members_4_0,
								"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.Scalar");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSetAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	iv_ruleIntegerLiteral=ruleIntegerLiteral
	{ $current=$iv_ruleIntegerLiteral.current; }
	EOF;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getIntegerLiteralAccess().getValueBIG_INTParserRuleCall_0());
			}
			lv_value_0_0=ruleBIG_INT
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getIntegerLiteralRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.BIG_INT");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	iv_ruleRealLiteral=ruleRealLiteral
	{ $current=$iv_ruleRealLiteral.current; }
	EOF;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_BIGDECIMAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getRealLiteralAccess().getValueBIGDECIMALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRealLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.BIGDECIMAL");
			}
		)
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current; }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_TRUE
				{
					newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralAccess().getValueTRUETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.TRUE");
				}
			)
		)
		    |
		(
			(
				lv_value_1_0=RULE_FALSE
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBooleanLiteralAccess().getValueFALSETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"edu.uah.rsesc.aadlsimulator.xtext.InputConstraint.FALSE");
				}
			)
		)
	)
;

// Entry rule entryRuleBIG_INT
entryRuleBIG_INT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBIG_INTRule()); }
	iv_ruleBIG_INT=ruleBIG_INT
	{ $current=$iv_ruleBIG_INT.current.getText(); }
	EOF;

// Rule BIG_INT
ruleBIG_INT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getBIG_INTAccess().getINTTerminalRuleCall());
	}
;

// Rule AddSubOperator
ruleAddSubOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAddSubOperatorAccess().getADDITIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAddSubOperatorAccess().getADDITIONEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAddSubOperatorAccess().getSUBTRACTIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAddSubOperatorAccess().getSUBTRACTIONEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MultDivOperator
ruleMultDivOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getMultDivOperatorAccess().getMULTIPLICATIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultDivOperatorAccess().getMULTIPLICATIONEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getMultDivOperatorAccess().getDIVISIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultDivOperatorAccess().getDIVISIONEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_BIGDECIMAL : ('0'..'9')* '.' ('0'..'9')+;

RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ('[' ('0'..'9')+ ']')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
