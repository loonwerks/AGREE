module edu.uah.rsesc.aadlsimulator.xtext.GenerateInputConstraint

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.xtext.generator.*

var projectName = "edu.uah.rsesc.aadlsimulator.xtext"
var rootPath = ".."

Workflow {
    component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "edu.uah.rsesc.aadlsimulator.xtext"
				rootPath = rootPath
				eclipsePlugin = {
					enabled = true
				}
				genericIde = {
					name = projectName
					
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "windows-1252"
				lineDelimiter = "\r\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				preferXtendStubs = false
			}
		}
		
    	language = auto-inject {
    		name = "edu.uah.rsesc.aadlsimulator.xtext.InputConstraint"
    
    		// Java API to access grammar elements (required by several other fragments)
    		fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}
    
    		// generates Java API for the generated EPackages
    		fragment = ecore.EMFGeneratorFragment2 auto-inject {}
    
    		// serializer 2.0
    		fragment = serializer.SerializerFragment2 {
    			generateStub = false
    		}

		    // formatter API 
		    fragment = adapter.FragmentAdapter {
		    	fragment = formatting.FormatterFragment {
		    	}
		    }

    		// a custom ResourceFactory for use with EMF
    		fragment = resourceFactory.ResourceFactoryFragment2 auto-inject {}
    
    		// The antlr parser generator fragment.
    		fragment = parser.antlr.XtextAntlrGeneratorFragment2 auto-inject {
    		  options = {
    		      backtrack = true
    		  }
    		}
    		
    		// Java-based API for validation
    		//fragment = validation.JavaValidatorFragment  auto-inject {
    		fragment = validation.ValidatorFragment2  auto-inject {    			
    		}
    	}
    }
}

